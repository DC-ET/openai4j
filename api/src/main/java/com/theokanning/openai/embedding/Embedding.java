package com.theokanning.openai.embedding;

import lombok.Data;

import java.util.Base64;
import java.util.List;

/**
 * Represents an embedding returned by the embedding api
 *
 * https://beta.openai.com/docs/api-reference/classifications/create
 */
@Data
public class Embedding {

    /**
     * The type of object returned, should be "embedding"
     */
    String object;

    /**
     * The embedding vector
     */
    List<Double> embedding;


    /**
     * The position of this embedding in the list
     */
    Integer index;

    public static void main(String[] args) {
        String s = "";
        System.out.println(Base64.getDecoder().decode(s));
    }
}
